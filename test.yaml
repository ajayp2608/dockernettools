apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: backend
    labels:
      app.kubernetes.io/name: backend
      app.kubernetes.io/instance: backend
      app.kubernetes.io/managed-by: Helm
    annotations:
      secret.reloader.stakater.com/reload: backend,firebase
  spec:
    selector:
      matchLabels:
        app.kubernetes.io/name: backend
        app.kubernetes.io/instance: backend
    template:
      metadata:
        labels:
          app.kubernetes.io/name: backend
          app.kubernetes.io/instance: backend
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: workertype
                  operator: In
                  values:
                  - services
        securityContext:
          fsGroup: 2000
        containers:
          - name: backend
            securityContext:
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1000
            image: "937607034339.dkr.ecr.amazonaws.co/mbackend-prd:afd40c131de7025264242de61d205ad4b3a348f4"
            imagePullPolicy: IfNotPresent
            env:
              - name: ENABLE_TRACE
                value: "true"
              - name: DD_LOGS_ENABLED
                value: "true"
              - name: KUBE_DEPLOYMENT_NAME
                value: "backend"
              - name: KUBE_NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              - name: KUBE_POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: KUBE_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: DD_AGENT_HOST
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              - name: PORT
                value: "8080"
            envFrom:
              - secretRef:
                  name:  backend
            ports:
              - name: http
                containerPort: 8080
                protocol: TCP
            livenessProbe:
              httpGet:
                path: /app/ping
                port: http
              failureThreshold: 4
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 10
  
            readinessProbe:
              httpGet:
                path: /app/ping
                port: http
              failureThreshold: 2
              initialDelaySeconds: 15
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 10
            volumeMounts:
              - mountPath: /tmp
                name: tmp
                readOnly: false
              - mountPath: /app/dist/******/****/
                name: firebase
                readOnly: true
            resources:
              limits:
                cpu: 1000m
                memory: 768Mi
              requests:
                cpu: 500m
                memory: 512Mi
        volumes:
          - emptyDir: {}
            name: tmp
          - name: firebase
            secret:
              secretName: firebase
